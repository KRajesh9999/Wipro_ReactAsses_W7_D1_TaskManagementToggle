{"ast":null,"code":"\n\n// import React, { createContext, useReducer, useContext, useState } from \"react\";\n// import \"./App.css\";\n\n// // ---------------- Context + Reducer ----------------\n// const TaskContext = createContext();\n\n// const ACTIONS = {\n//   ADD: \"ADD\",\n//   REMOVE: \"REMOVE\",\n//   TOGGLE: \"TOGGLE\"\n// };\n\n// function taskReducer(state, action) {\n//   switch (action.type) {\n//     case ACTIONS.ADD:\n//       return [...state, { id: Date.now(), text: action.payload, completed: false }];\n//     case ACTIONS.REMOVE:\n//       return state.filter(task => task.id !== action.payload);\n//     case ACTIONS.TOGGLE:\n//       return state.map(task =>\n//         task.id === action.payload ? { ...task, completed: !task.completed } : task\n//       );\n//     default:\n//       return state;\n//   }\n// }\n\n// function TaskProvider({ children }) {\n//   const [tasks, dispatch] = useReducer(taskReducer, [\n//     { id: 1, text: \"Finish Wipro Week 7 assignment\", completed: false },\n//     { id: 2, text: \"Review Context API & Hooks\", completed: true }\n//   ]);\n\n//   return (\n//     <TaskContext.Provider value={{ tasks, dispatch }}>\n//       {children}\n//     </TaskContext.Provider>\n//   );\n// }\n\n// // ---------------- Custom Hook ----------------\n// function useTasks() {\n//   const ctx = useContext(TaskContext);\n//   if (!ctx) throw new Error(\"useTasks must be used inside TaskProvider\");\n//   const { tasks, dispatch } = ctx;\n\n//   const add = text => dispatch({ type: ACTIONS.ADD, payload: text });\n//   const remove = id => dispatch({ type: ACTIONS.REMOVE, payload: id });\n//   const toggle = id => dispatch({ type: ACTIONS.TOGGLE, payload: id });\n\n//   return { tasks, add, remove, toggle };\n// }\n\n// // ---------------- Components ----------------\n// function AddTask() {\n//   const [text, setText] = useState(\"\");\n//   const { add } = useTasks();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     if (!text.trim()) return;\n//     add(text);\n//     setText(\"\");\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit} style={{ marginBottom: \"1rem\" }}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Add new task...\"\n//         value={text}\n//         onChange={e => setText(e.target.value)}\n//         style={{ padding: \"8px\", marginRight: \"8px\" }}\n//       />\n//       <button type=\"submit\">Add Task</button>\n//     </form>\n//   );\n// }\n\n// function TaskItem({ task }) {\n//   const { toggle, remove } = useTasks();\n//   return (\n//     <li style={{ marginBottom: \"8px\" }}>\n//       <input\n//         type=\"checkbox\"\n//         checked={task.completed}\n//         onChange={() => toggle(task.id)}\n//       />\n//       <span style={{ marginLeft: \"8px\", textDecoration: task.completed ? \"line-through\" : \"none\" }}>\n//         {task.text}\n//       </span>\n//       <button\n//         onClick={() => remove(task.id)}\n//         style={{ marginLeft: \"12px\", background: \"red\", color: \"white\" }}\n//       >\n//         Remove\n//       </button>\n//     </li>\n//   );\n// }\n\n// function TaskList() {\n//   const { tasks } = useTasks();\n//   const total = tasks.length;\n//   const completed = tasks.filter(t => t.completed).length;\n\n//   return (\n//     <div>\n//       <h3>Total: {total} | Completed: {completed}</h3>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {tasks.length === 0 && <p>No tasks yet. Add one above!</p>}\n//         {tasks.map(task => (\n//           <TaskItem key={task.id} task={task} />\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// // ---------------- Main App ----------------\n// function App() {\n//   return (\n//     <TaskProvider>\n//       <div style={{ maxWidth: \"500px\", margin: \"20px auto\", padding: \"20px\", border: \"1px solid #ddd\", borderRadius: \"8px\" }}>\n//         <h1>Task Management App</h1>\n//         <AddTask />\n//         <TaskList />\n//       </div>\n//     </TaskProvider>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["E:/WiproJuly/React/taskmanagement_toggle/src/App.js"],"sourcesContent":["\n\n\n// import React, { createContext, useReducer, useContext, useState } from \"react\";\n// import \"./App.css\";\n\n// // ---------------- Context + Reducer ----------------\n// const TaskContext = createContext();\n\n// const ACTIONS = {\n//   ADD: \"ADD\",\n//   REMOVE: \"REMOVE\",\n//   TOGGLE: \"TOGGLE\"\n// };\n\n// function taskReducer(state, action) {\n//   switch (action.type) {\n//     case ACTIONS.ADD:\n//       return [...state, { id: Date.now(), text: action.payload, completed: false }];\n//     case ACTIONS.REMOVE:\n//       return state.filter(task => task.id !== action.payload);\n//     case ACTIONS.TOGGLE:\n//       return state.map(task =>\n//         task.id === action.payload ? { ...task, completed: !task.completed } : task\n//       );\n//     default:\n//       return state;\n//   }\n// }\n\n// function TaskProvider({ children }) {\n//   const [tasks, dispatch] = useReducer(taskReducer, [\n//     { id: 1, text: \"Finish Wipro Week 7 assignment\", completed: false },\n//     { id: 2, text: \"Review Context API & Hooks\", completed: true }\n//   ]);\n\n//   return (\n//     <TaskContext.Provider value={{ tasks, dispatch }}>\n//       {children}\n//     </TaskContext.Provider>\n//   );\n// }\n\n// // ---------------- Custom Hook ----------------\n// function useTasks() {\n//   const ctx = useContext(TaskContext);\n//   if (!ctx) throw new Error(\"useTasks must be used inside TaskProvider\");\n//   const { tasks, dispatch } = ctx;\n\n//   const add = text => dispatch({ type: ACTIONS.ADD, payload: text });\n//   const remove = id => dispatch({ type: ACTIONS.REMOVE, payload: id });\n//   const toggle = id => dispatch({ type: ACTIONS.TOGGLE, payload: id });\n\n//   return { tasks, add, remove, toggle };\n// }\n\n// // ---------------- Components ----------------\n// function AddTask() {\n//   const [text, setText] = useState(\"\");\n//   const { add } = useTasks();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     if (!text.trim()) return;\n//     add(text);\n//     setText(\"\");\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit} style={{ marginBottom: \"1rem\" }}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Add new task...\"\n//         value={text}\n//         onChange={e => setText(e.target.value)}\n//         style={{ padding: \"8px\", marginRight: \"8px\" }}\n//       />\n//       <button type=\"submit\">Add Task</button>\n//     </form>\n//   );\n// }\n\n// function TaskItem({ task }) {\n//   const { toggle, remove } = useTasks();\n//   return (\n//     <li style={{ marginBottom: \"8px\" }}>\n//       <input\n//         type=\"checkbox\"\n//         checked={task.completed}\n//         onChange={() => toggle(task.id)}\n//       />\n//       <span style={{ marginLeft: \"8px\", textDecoration: task.completed ? \"line-through\" : \"none\" }}>\n//         {task.text}\n//       </span>\n//       <button\n//         onClick={() => remove(task.id)}\n//         style={{ marginLeft: \"12px\", background: \"red\", color: \"white\" }}\n//       >\n//         Remove\n//       </button>\n//     </li>\n//   );\n// }\n\n// function TaskList() {\n//   const { tasks } = useTasks();\n//   const total = tasks.length;\n//   const completed = tasks.filter(t => t.completed).length;\n\n//   return (\n//     <div>\n//       <h3>Total: {total} | Completed: {completed}</h3>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {tasks.length === 0 && <p>No tasks yet. Add one above!</p>}\n//         {tasks.map(task => (\n//           <TaskItem key={task.id} task={task} />\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// // ---------------- Main App ----------------\n// function App() {\n//   return (\n//     <TaskProvider>\n//       <div style={{ maxWidth: \"500px\", margin: \"20px auto\", padding: \"20px\", border: \"1px solid #ddd\", borderRadius: \"8px\" }}>\n//         <h1>Task Management App</h1>\n//         <AddTask />\n//         <TaskList />\n//       </div>\n//     </TaskProvider>\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}